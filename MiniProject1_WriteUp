Project Overview [Maximum 100 words]
What data source(s) did you use and what technique(s) did you use analyze/process them? What did you hope to learn/create?

    I used the Twitter data source and performed sentiment analysis on the recent tweets on each of the presidential candidates: Donald Trump and Hilary Clinton. I wanted to see who tweeters thought were the more favorable candidate, and perhaps this will align with who wins the election in November. I also used histograms to compare the distribution of negative, neutral, and positive polarities of the tweets about Donald Trump and Hilary Clinton.



Implementation [~2-3 paragraphs]
Describe your implementation at a system architecture level. You should NOT walk through your code line by line, or explain every function (we can get that from your docstrings). Instead, talk about the major components, algorithms, data structures and how they fit together. You should also discuss at least one design decision where you had to choose between multiple alternatives, and explain why you made the choice you did.

    The goal of my code was to: (1) compare the average polarities of each presidential candidate, and (2) compare the distribution of the polarities for each presidential candidate in histograms. To achieve goal #1, I had to get a list of polarities of each candidate in order to find the average. I utilized the twitter search function and the sentiment function from the pattern module. The twitter search function allows me to obtain the tweets and the sentiment function returns the polarity and subjectivity of the tweet in a tuple. I utilized only the polarity, which is the first element in the tuple. I placed this code inside a function called get_polarity_list so it can be called for both presidential candidates without repeating the code.   Then, I created the find_avg_polarity function to use the list created from get_polarity_list and find the average polarity. 
    To achieve goal #2, I created a function called draw_histogram. I used some of the initial code from the Machine Learning toolbox, specifically the matplotlib.pyplot module. I passed in the polarity_list generated by get_polarity_list, as previously explained, to draw a histogram using functions such as xlabel, ylabel, title, axis, grid, and show. I used the figure function so that both the presidential candidates' histogram will pop up in different windows and can be compared. Using these histograms, we can now compare the distribution of polarities. 
    


Results [~2-3 paragraphs + figures/examples]
Present what you accomplished:

    For one of the times I ran the code, I got the output below (the two histograms of the output are attached as exhibits in the folder named 'donald trump' and 'hilary clinton':

The last 100 tweets about Donald Trump has an average polarity of 0.0383908730159
The last 100 tweets about Hilary Clinton has an average polarity of -0.00256539101331
The last 100 tweets about each of the presidential candidates show that Donald Trump is the more favorable presidential candidate 'hilary clinton'):

    Here we can see that Donald Trump appears to be the more favorable presidential candidate because the average polarity of the last 100 tweets regarding him is 0.038, which is higher than that of Hilary Clinton's which is -0.0025. When we look at Donald Trump's histogram as compared to Hilary Clinton's histogram, we see that both presidential candidates have a large number of neutral tweets. Clinton has more neutral responses than Trump and Clinton has an even spread of negative to neutral and neutral to positive polarities from -1.0 to 1.0. Trump, on the other hand, has fewer neutral tweets and the rest are more evenly spread from -0.5 to 0.5. This may indicate that while ~15-20% of the sample of 100 tweets view the presidential candidates neutrally, the rest of the tweets view Clinton more extremely than Trump.
    
    
    
Reflection [~1 paragraph]
From a process point of view, what went well? What could you improve? Other possible reflection topics: Was your project appropriately scoped? Did you have a good plan for unit testing? How will you use what you learned going forward? What do you wish you knew before you started that would have helped you succeed?

    Throughout this mini project, I learned to use the python community online to help me write code and utilize modules and functions that I have not learned yet. I was able to test my code piece by piece before adding more to get more results or differently. For example, I'll print the polarity_list to check that it works before I start using it in another part of my code. I will use these learned functions and modules to help me complete the toolboxes and continue to utilize the python community as well. I have also learned to write more concise code- which still needs more work- but overall, there was improvement. For example, coding with indices versus the object directly. 